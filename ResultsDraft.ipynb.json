{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c1e09ee8",
   "metadata": {},
   "source": [
    "#### Data handling\n",
    "Necessary libraries were imported. \n",
    "\n",
    "CMAP data (temperature, soil moisture, snowpack and discharge) for each location were imported, keeping only the models that Bond (YEAR) used (ACCESS1-3, HADGEM2-ES, NorESM1-M, inmcm4, MIROC_ESM), selected for representing a variety of temperature and precipitation scenarios. \n",
    "\n",
    "The LOCA-WBM daily climate and drought data found using CMIP5 simulations for both RCP 4.5 and 8.5 scenarios did not contain missing values or values that needed to be replaced, because the data were simulated.  \n",
    "\n",
    "Season start and end dates (November 1 through May 31), dates that have potential for snow cover or impact of snow cover in New Hampshire, were defined. (Grogan). By trimming to these dates, this study examined only a single winter and spring during one water year at a time, and excluded large summertime precipitation events. \n",
    "\n",
    "Constants for freezing temperature and no snow depth were set. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "503a7b5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%Import libraries\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "from pprint import pprint\n",
    "import numpy as np                   \n",
    "from matplotlib import pyplot as plt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5277fe75",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%Import files\n",
    "fileTL =  'LampreyRiver_tasmax_rcp45_1980-2099_daily.csv'   # Lamprey temp file\n",
    "fileTP = 'PemigewassetRiver_tasmax_rcp45_1980-2099_daily.csv' #Pemi temp file\n",
    "fileSPL = 'LampreyRiver_snowPack_rcp45_1980-2099_daily.csv' #lamprey snowpack file\n",
    "fileSPP = 'PemigewassetRiver_snowPack_rcp45_1980-2099_daily.csv' #pemi snowpack file\n",
    "fileSMLacc = 'LampreyRiver_soilMoist_ACCESS1-3_rcp45_1980-2099_timeseries.csv' #lamprey soil moisture/ACCESS1-3\n",
    "fileSMLhad = 'LampreyRiver_soilMoist_HadGEM2-ES_rcp45_1980-2099_timeseries.csv' #lamprey soil moisture/HADGEM2-ES\n",
    "fileSMLnor =  'LampreyRiver_soilMoist_NorESM1-M_rcp45_1980-2099_timeseries.csv' #lamprey soil moisture/NorESM1-M\n",
    "fileSMLinm = 'LampreyRiver_soilMoist_inmcm4_rcp45_1980-2099_timeseries.csv' #lamprey soil moisture/inmcm4\n",
    "fileSMLmir = 'LampreyRiver_soilMoist_MIROC-ESM_rcp45_1980-2099_timeseries.csv' #lamprey soil moisture/MIROC_ESM\n",
    "fileQLacc = 'LampreyRiver_discharge_ACCESS1-3_rcp45_1980-2099_timeseries.csv' #lamprey discharge/ACCESS1-3\n",
    "fileQLhad = 'LampreyRiver_discharge_HadGEM2-ES_rcp45_1980-2099_timeseries.csv' #lamprey discharge/HADGEM2-ES\n",
    "fileQLnor = 'LampreyRiver_discharge_NorESM1-M_rcp45_1980-2099_timeseries.csv' #lamprey discharge/NorESM1-M\n",
    "fileQLinm = 'LampreyRiver_discharge_inmcm4_rcp45_1980-2099_timeseries.csv' #lamprey discharge/inmcm4\n",
    "fileQLmir = 'LampreyRiver_discharge_MIROC-ESM_rcp45_1980-2099_timeseries.csv' #lamprey discharge/MIROC_ESM\n",
    "fileSMPacc = 'PemigewassetRiver_soilMoist_ACCESS1-3_rcp45_1980-2099_timeseries.csv' #pemi soil moisture/ACCESS1-3\n",
    "fileSMPhad = 'PemigewassetRiver_soilMoist_HadGEM2-ES_rcp45_1980-2099_timeseries.csv' #pemi soil moisture/HADGEM2-ES\n",
    "fileSMPnor = 'PemigewassetRiver_soilMoist_NorESM1-M_rcp45_1980-2099_timeseries.csv'  #pemi soil moisture/NorESM1-M\n",
    "fileSMPinm = 'PemigewassetRiver_soilMoist_inmcm4_rcp45_1980-2099_timeseries.csv' #pemi soil moisture/inmcm4\n",
    "fileSMPmir = 'PemigewassetRiver_soilMoist_MIROC-ESM_rcp45_1980-2099_timeseries.csv' #pemi soil moisture/MIROC_ESM\n",
    "fileQPacc = 'PemigewassetRiver_discharge_ACCESS1-3_rcp45_1980-2099_timeseries.csv' #pemi discharge/ACCESS1-3\n",
    "fileQPhad = 'PemigewassetRiver_discharge_HadGEM2-ES_rcp45_1980-2099_timeseries.csv' #pemi discharge/HADGEM2-ES\n",
    "fileQPnor = 'PemigewassetRiver_discharge_NorESM1-M_rcp45_1980-2099_timeseries.csv' #pemi discharge/NorESM1-M\n",
    "fileQPinm = 'PemigewassetRiver_discharge_inmcm4_rcp45_1980-2099_timeseries.csv' #pemi discharge/inmcm4\n",
    "fileQPmir = 'PemigewassetRiver_discharge_MIROC-ESM_rcp45_1980-2099_timeseries.csv' #pemi discharge/MIROC_ESM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5d964ec3",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'LampreyRiver_tasmax_rcp45_1980-2099_daily.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/zg/4_mpj6217092k7t20fprlgh00000gn/T/ipykernel_8936/4130078272.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#%% Load data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#Lamprey temp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m dftl = pd.read_csv(fileTL, delimiter=\",\", comment='#', header=0,\n\u001b[0m\u001b[1;32m      7\u001b[0m                  parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n\u001b[1;32m      8\u001b[0m \u001b[0mdftl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdftl\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ACCESS1-3'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'HadGEM2-ES'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NorESM1-M'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'inmcm4'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MIROC-ESM'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    220\u001b[0m         \u001b[0mLet\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mreaders\u001b[0m \u001b[0mopen\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0mafter\u001b[0m \u001b[0mthey\u001b[0m \u001b[0mare\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtheir\u001b[0m \u001b[0mpotential\u001b[0m \u001b[0mraises\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \"\"\"\n\u001b[0;32m--> 222\u001b[0;31m         self.handles = get_handle(\n\u001b[0m\u001b[1;32m    223\u001b[0m             \u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    700\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    703\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'LampreyRiver_tasmax_rcp45_1980-2099_daily.csv'"
     ]
    }
   ],
   "source": [
    "#Constants\n",
    "freeze=0\n",
    "nosnow=.1 \n",
    "#%% Load data \n",
    "#Lamprey temp\n",
    "dftl = pd.read_csv(fileTL, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dftl = dftl[['ACCESS1-3', 'HadGEM2-ES', 'NorESM1-M', 'inmcm4', 'MIROC-ESM']]\n",
    "dftl.index = pd.to_datetime(dftl.index)\n",
    "#Pemi temp\n",
    "dftp = pd.read_csv(fileTP, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dftp = dftp[['ACCESS1-3', 'HadGEM2-ES', 'NorESM1-M', 'inmcm4', 'MIROC-ESM']]\n",
    "dftp.index = pd.to_datetime(dftp.index)\n",
    "#Lamprey snowpack\n",
    "dfspl = pd.read_csv(fileSPL, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfspl = dfspl[['ACCESS1-3', 'HadGEM2-ES', 'NorESM1-M', 'inmcm4', 'MIROC-ESM']]\n",
    "dfspl.index = pd.to_datetime(dfspl.index)\n",
    "#Pemi snowpack\n",
    "dfspp = pd.read_csv(fileSPP, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfspp = dfspp[['ACCESS1-3', 'HadGEM2-ES', 'NorESM1-M', 'inmcm4', 'MIROC-ESM']]\n",
    "dfspp.index = pd.to_datetime(dfspp.index)\n",
    "#Lamprey soil moisture\n",
    "dfsmlacc = pd.read_csv(fileSMLacc, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmlhad = pd.read_csv(fileSMLhad, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmlnor = pd.read_csv(fileSMLnor, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmlinm = pd.read_csv(fileSMLinm, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmlmir = pd.read_csv(fileSMLmir, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsoill = pd.concat([dfsmlacc, dfsmlhad, dfsmlnor, dfsmlinm, dfsmlmir], axis=1)\n",
    "dfsoill.index = pd.to_datetime(dfsoill.index)\n",
    "#Pemi soil moisture\n",
    "dfsmpacc = pd.read_csv(fileSMPacc, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmphad = pd.read_csv(fileSMPhad, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmpnor = pd.read_csv(fileSMPnor, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmpinm = pd.read_csv(fileSMPinm, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsmpmir = pd.read_csv(fileSMPmir, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfsoilp = pd.concat([dfsmpacc, dfsmphad, dfsmpnor, dfsmpinm, dfsmpmir], axis=1)\n",
    "dfsoilp.index = pd.to_datetime(dfsoilp.index)\n",
    "#Lamprey discharge\n",
    "dfqlacc = pd.read_csv(fileQLacc, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqlhad = pd.read_csv(fileQLhad, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqlnor = pd.read_csv(fileQLnor, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqlinm = pd.read_csv(fileQLinm, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqlmir = pd.read_csv(fileQLmir, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfql = pd.concat([dfqlacc, dfqlhad, dfqlnor, dfqlinm, dfqlmir], axis=1)\n",
    "dfql.index = pd.to_datetime(dfql.index)\n",
    "#Pemi discharge\n",
    "dfqpacc = pd.read_csv(fileQPacc, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqphad = pd.read_csv(fileQPhad, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqpnor = pd.read_csv(fileQPnor, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqpinm = pd.read_csv(fileQPinm, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqpmir = pd.read_csv(fileQPmir, delimiter=\",\", comment='#', header=0,\n",
    "                 parse_dates= {\"date\" : [\"Year\",\"Month\",\"Day\"]}, index_col='date')\n",
    "dfqp = pd.concat([dfqpacc, dfqphad, dfqpnor, dfqpinm, dfqpmir], axis=1)\n",
    "dfqp.index = pd.to_datetime(dfqp.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2abd6fcc",
   "metadata": {},
   "source": [
    "#### Winter severity \n",
    "  Winter snowiness and coldness were determined to approximate winter severity. Depth and date of peak snow depth and cumulative snowfall days (days where > .1 cm of snow fell) were found for each year, to determine how snow each winter was. The number of cumulative freezing degree days (FDD; days ≥ 0 C) was found to determine how cold each winter was. Together, these metrics represent the severity of a winter. (Contosta). These calculations were represented in a time series showing peak snow depth and FDD for each year over the analysis period, in order to examine trends in winter severity over time. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e27b2387",
   "metadata": {},
   "source": [
    "Maximum snowpack depth and date were found for each location, within the season limits previously defined, for each model. Results were stored in a dataframe with year as the index, and a column for each model’s max snow depth and each model’s date of max snow depth as a julian day. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95286976",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%% Determining winter severity for each model at both locations \n",
    "#Lamprey snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'ACCESS1-3'].max() #max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'ACCESS1-3'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'HadGEM2-ES'].max() #max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'HadGEM2-ES'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'NorESM1-M'].max() #max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'NorESM1-M'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'inmcm4'].max() #max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'inmcm4'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'MIROC-ESM'].max() #max snow depth\n",
    "dfspl.loc['1980-11-1':'1981-5-31', 'MIROC-ESM'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "#Pemi snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'ACCESS1-3'].max() #max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'ACCESS1-3'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'HadGEM2-ES'].max() #max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'HadGEM2-ES'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'NorESM1-M'].max() #max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'NorESM1-M'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'inmcm4'].max() #max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'inmcm4'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'MIROC-ESM'].max() #max snow depth\n",
    "dfspp.loc['1980-11-1':'1981-5-31', 'MIROC-ESM'].idxmax().strftime('%j') #juliandate of max snow depth\n",
    "#Lamprey freezing degree days \n",
    "sum(dftl.loc['1980-11-1':'1981-5-31','ACCESS1-3']<=freeze)\n",
    "sum(dftl.loc['1980-11-1':'1981-5-31','HadGEM2-ES']<=freeze)\n",
    "sum(dftl.loc['1980-11-1':'1981-5-31','NorESM1-M']<=freeze)\n",
    "sum(dftl.loc['1980-11-1':'1981-5-31','inmcm4']<=freeze)\n",
    "sum(dftl.loc['1980-11-1':'1981-5-31','MIROC-ESM']<=freeze)\n",
    "#Pemi freezing degree days \n",
    "sum(dftp.loc['1980-11-1':'1981-5-31','ACCESS1-3']<=freeze)\n",
    "sum(dftp.loc['1980-11-1':'1981-5-31','HadGEM2-ES']<=freeze)\n",
    "sum(dftp.loc['1980-11-1':'1981-5-31','NorESM1-M']<=freeze)\n",
    "sum(dftp.loc['1980-11-1':'1981-5-31','inmcm4']<=freeze)\n",
    "sum(dftp.loc['1980-11-1':'1981-5-31','MIROC-ESM']<=freeze)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8befcd66",
   "metadata": {},
   "source": [
    "#### Transition dates \n",
    " Next, transition dates were determined for each year. First, early season transition dates were identified. Air temperature was considered to have transitioned to spring when the high air temperature exceeded 0 C, and did not dip below 0 C for the rest of the season. Snow depth was considered to have transitioned on the day of snow disappearance, or when snow depth was less than .1 cm, and did not exceed .1 cm again until the following season. (Contosta, Grogan). Understanding dates of the last freezing days and snow disappearance helps determines the onset of the transition from winter to spring. Then, hydrological transition dates were identified. The date of peak soil moisture represented the soil moisture transition, and the date of peak baseflow in the river represented river discharge transition. (contosta). In snow-controlled ecosystems, river discharge and soil moisture peaks represent springtime hydrological transitions.  (Contosta). These transition dates were represented in a time series plotting the day of year each annual transition occurred on the y-axis, over the period of analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9ffcf4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%Determining first transition dates \n",
    "#Lamprey temperature transition date\n",
    "fddlacc = (dftl.loc['1980-11-1':'1981-5-31','ACCESS1-3']<=freeze) #fdd\n",
    "ttlacc = int(fddlacc.where(fddlacc==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "fddlhad = (dftl.loc['1980-11-1':'1981-5-31','HadGEM2-ES']<=freeze) #fdd\n",
    "ttlhad = int(fddlhad.where(fddlhad==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "fddlnor = (dftl.loc['1980-11-1':'1981-5-31','NorESM1-M']<=freeze) #fdd\n",
    "ttlnor = int(fddlnor.where(fddlnor==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "fddlinm = (dftl.loc['1980-11-1':'1981-5-31','inmcm4']<=freeze)#fdd\n",
    "ttlinm = int(fddlinm.where(fddlinm==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "fddlmir = (dftl.loc['1980-11-1':'1981-5-31','MIROC-ESM']<=freeze)#fdd\n",
    "ttlmir = int(fddlmir.where(fddlmir==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "#Pemi temperature transition datte\n",
    "fddpacc = (dftp.loc['1980-11-1':'1981-5-31','ACCESS1-3']<=freeze) #fdd\n",
    "ttpacc = int(fddpacc.where(fddpacc==True).dropna().index[-1].strftime('%j')) #T transition date    \n",
    "fddphad = (dftp.loc['1980-11-1':'1981-5-31','HadGEM2-ES']<=freeze) #fdd\n",
    "ttphad = int(fddphad.where(fddphad==True).dropna().index[-1].strftime('%j'))  #T transition date  \n",
    "fddpnor = (dftp.loc['1980-11-1':'1981-5-31','NorESM1-M']<=freeze) #fdd\n",
    "ttpnor = int(fddpnor.where(fddpnor==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "fddpinm = (dftp.loc['1980-11-1':'1981-5-31','inmcm4']<=freeze)#fdd\n",
    "ttpinm = int(fddpinm.where(fddpinm==True).dropna().index[-1].strftime('%j')) #T transition date   \n",
    "fddpmir = (dftp.loc['1980-11-1':'1981-5-31','MIROC-ESM']<=freeze) #fdd\n",
    "ttpmir = int(fddpmir.where(fddpmir==True).dropna().index[-1].strftime('%j')) #T transition date  \n",
    "#Lamprey snow disapearrance date\n",
    "sdlacc = (dfspl.loc['1980-11-1':'1981-5-31','ACCESS1-3']>=nosnow) #snow on the ground days (snow days)\n",
    "stlacc = int(sdlacc.where(sdlacc==True).dropna().index[-1].strftime('%j')) #snow disapearance date (snow transition/st)\n",
    "sdlhad = (dfspl.loc['1980-11-1':'1981-5-31','HadGEM2-ES']>=nosnow) #snow days\n",
    "stlhad = int(sdlhad.where(sdlhad==True).dropna().index[-1].strftime('%j')) #st date  \n",
    "sdlnor = (dfspl.loc['1980-11-1':'1981-5-31','NorESM1-M']>=nosnow) #snow days\n",
    "stlnor = int(sdlnor.where(sdlnor==True).dropna().index[-1].strftime('%j')) #st date   \n",
    "sdlinm = (dfspl.loc['1980-11-1':'1981-5-31','inmcm4']>=nosnow)#snow days\n",
    "stlinm = int(sdlinm.where(sdlinm==True).dropna().index[-1].strftime('%j')) #st date  \n",
    "sdlmir = (dfspl.loc['1980-11-1':'1981-5-31','MIROC-ESM']>=nosnow)#snow days\n",
    "stlmir = int(sdlmir.where(sdlmir==True).dropna().index[-1].strftime('%j')) #st date   \n",
    "#Pemi snow disapearrance date\n",
    "sdpacc = (dfspp.loc['1980-11-1':'1981-5-31','ACCESS1-3']>=nosnow) #snow on the ground days (snow days)\n",
    "stpacc = int(sdpacc.where(sdpacc==True).dropna().index[-1].strftime('%j')) #snow disapearance date (snow transition/st)\n",
    "sdphad = (dfspp.loc['1980-11-1':'1981-5-31','HadGEM2-ES']>=nosnow) #snow days\n",
    "stphad = int(sdphad.where(sdphad==True).dropna().index[-1].strftime('%j')) #st date  \n",
    "sdpnor = (dfspp.loc['1980-11-1':'1981-5-31','NorESM1-M']>=nosnow) #snow days\n",
    "stpnor = int(sdpnor.where(sdpnor==True).dropna().index[-1].strftime('%j')) #st date   \n",
    "sdpinm = (dfspp.loc['1980-11-1':'1981-5-31','inmcm4']>=nosnow)#snow days\n",
    "stpinm = int(sdpinm.where(sdpinm==True).dropna().index[-1].strftime('%j')) #st date  \n",
    "sdpmir = (dfspp.loc['1980-11-1':'1981-5-31','MIROC-ESM']>=nosnow)#snow days\n",
    "stpmir = int(sdpmir.where(sdpmir==True).dropna().index[-1].strftime('%j')) #st date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1f5cd10",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%% Determining hydrological transition dates \n",
    "#Lamprey soil moisture max\n",
    "dfsoill.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].max() #max soil moisture\n",
    "int(dfsoill.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoill.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].max() #max soil moisture\n",
    "int(dfsoill.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoill.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].max() #max soil moisture\n",
    "int(dfsoill.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoill.loc['1981-1-1':'1981-5-31', 'inmcm4'].max() #max soil moisture\n",
    "int(dfsoill.loc['1981-1-1':'1981-5-31', 'inmcm4'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoill.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].max() #max soil moisture\n",
    "int(dfsoill.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "#Pemi soil moisture max\n",
    "dfsoilp.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].max() #max soil moisture\n",
    "int(dfsoilp.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoilp.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].max() #max soil moisture\n",
    "int(dfsoilp.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoilp.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].max() #max soil moisture\n",
    "int(dfsoilp.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoilp.loc['1981-1-1':'1981-5-31', 'inmcm4'].max() #max soil moisture\n",
    "int(dfsoilp.loc['1981-1-1':'1981-5-31', 'inmcm4'].idxmax().strftime('%j')) #juliandate of max soil moisture\n",
    "dfsoilp.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].max() #max soil moisture\n",
    "int(dfsoilp.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].idxmax().strftime('%j')) #juliandate of max snow depth\n",
    "#Lamprey maximum discharge\n",
    "dfql.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].max() #max discharge\n",
    "int(dfql.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfql.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].max() #max discharge\n",
    "int(dfql.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfql.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].max() #max discharge\n",
    "int(dfql.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfql.loc['1981-1-1':'1981-5-31', 'inmcm4'].max() #max discharge\n",
    "int(dfql.loc['1981-1-1':'1981-5-31', 'inmcm4'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfql.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].max() #max discharge\n",
    "int(dfql.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "#Pemi maximum discharge\n",
    "dfqp.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].max() #max discharge\n",
    "int(dfqp.loc['1981-1-1':'1981-5-31', 'ACCESS1-3'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfqp.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].max() #max discharge\n",
    "int(dfqp.loc['1981-1-1':'1981-5-31', 'HadGEM2-ES'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfqp.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].max() #max discharge\n",
    "int(dfqp.loc['1981-1-1':'1981-5-31', 'NorESM1-M'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfqp.loc['1981-1-1':'1981-5-31', 'inmcm4'].max() #max discharge\n",
    "int(dfqp.loc['1981-1-1':'1981-5-31', 'inmcm4'].idxmax().strftime('%j')) #juliandate of max discharge\n",
    "dfqp.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].max() #max discharge\n",
    "int(dfqp.loc['1981-1-1':'1981-5-31', 'MIROC-ESM'].idxmax().strftime('%j')) #juliandate of max discharge"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "490f7c41",
   "metadata": {},
   "source": [
    "#### Lags\n",
    "  Next, lags between transition dates were determined for each year. Lags were calculated as the number of days between pairs of transition dates in the same location. (Contosta). Pairs of transition dates for which lags were calculated are represented in Table. Lag lengths between transition dates for various variables help determine temporal relationships between these variables. Lag lengths were represented in a time series with lag lengths plotted against year for the length of the analysis period, to visualize how these temporal relationships may change over time. \n",
    "Table: pairs of transition dates for which lags were calculated.  \n",
    "| --- | --- |\n",
    "| Peak snow depth |\tSnow disappearance|\n",
    "| Peak snow depth |\tPeak soil moisture|\n",
    "| Peak snow depth |\tPeak discharge |\n",
    "| Snow disappearance |\tPeak soil moisture |\n",
    "| Snow disappearance |\tPeak discharge |\n",
    "| Peak soil moisture |\tPeak discharge |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "283786fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1283f97c",
   "metadata": {},
   "source": [
    "#### Correlational analysis \n",
    "  Finally, it was tested whether timing of transitions and duration of lags varied as a function of winter severity, as represented by snow depth and FDD.  (Contosta) Pearson correlational analysis was performed on number of FDD and duration of lag (number of days) for each lag pair, peak snow depth and duration of lag for each lag pair, FDD and transition date for each variable, and peak snow depth and transition date for each variable.  The R2 value of the best fit line for each correlation was used to represent strength of relationship.  This analysis determined relationship between winter severity and springtime transitions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ff7761e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
